📘 자료구조: 배열 (Array)
✅ 1. 배열이란?
**배열(Array)**은 같은 데이터 타입의 여러 데이터를 연속된 메모리 공간에 저장하는 자료구조입니다.

📌 예:
text
복사
편집
int arr[5] = {10, 20, 30, 40, 50};
→ 위 배열은 5개의 정수형 데이터를 저장하며, 각각 인덱스 0~4로 접근할 수 있습니다.

✅ 2. 배열의 특징
항목	내용
자료형	동일한 타입만 저장 가능 (ex: int 배열, float 배열)
크기	생성 시 고정 (동적으로 늘리려면 다른 자료구조 필요)
메모리	연속된 공간에 할당됨 (빠른 접근이 가능)
접근 시간	임의 접근(Random Access): O(1)
삽입/삭제	중간 삽입/삭제 시 O(n)의 시간 복잡도 발생

✅ 3. 배열의 장단점
👍 장점
인덱스를 통한 빠른 접근 (랜덤 액세스)

구조가 단순하고 구현이 쉬움

👎 단점
크기를 미리 지정해야 함

삽입/삭제 시 요소 이동 필요 → 느림

중간에 비는 공간 없이 연속되어야 하므로 메모리 낭비 발생 가능

✅ 4. 언어별 코드 예제 (배열 생성, 접근, 삽입)
🔹 C 예제
#include <stdio.h>

int main() {
    int arr[5] = {10, 20, 30, 40, 50}; // 배열 선언 및 초기화

    // 배열 요소 접근
    printf("세 번째 요소: %d\n", arr[2]); // 인덱스 2 → 30

    // 배열 수정
    arr[1] = 25;
    printf("수정된 두 번째 요소: %d\n", arr[1]); // 25 출력

    return 0;
}

🔹 C++ 예제
#include <iostream>
using namespace std;

int main() {
    int arr[5] = {10, 20, 30, 40, 50}; // 배열 선언

    cout << "첫 번째 요소: " << arr[0] << endl;

    arr[4] = 60; // 마지막 요소 수정
    cout << "수정된 마지막 요소: " << arr[4] << endl;

    return 0;
}

🔹 Java 예제
public class ArrayExample {
    public static void main(String[] args) {
        int[] arr = {10, 20, 30, 40, 50}; // 배열 선언 및 초기화

        System.out.println("네 번째 요소: " + arr[3]); // 인덱스 3 → 40

        arr[0] = 15; // 첫 번째 요소 수정
        System.out.println("수정된 첫 번째 요소: " + arr[0]);
    }
}

🔹 Python 예제
python
arr = [10, 20, 30, 40, 50]  # 리스트로 배열처럼 사용

print("다섯 번째 요소:", arr[4])  # 인덱스 4 → 50

arr[2] = 35  # 세 번째 요소 변경
print("수정된 세 번째 요소:", arr[2])

✅ 5. 시각화 자료 (배열 구조)
메모리 구조 (인덱스 기준):
[10] [20] [30] [40] [50]
 ^    ^    ^    ^    ^
 0    1    2    3    4

✅ 6. 요약
배열은 가장 기본적인 선형 자료구조

빠른 접근이 장점, 유연성 부족은 단점

다차원 배열, 포인터와 배열, 배열 기반 알고리즘 등으로 확장 가능


✅ 배열의 활용 예시
📌 1. 성적/점수 처리
학생들의 성적을 저장하고 평균을 구하는 경우:

int scores[5] = {85, 90, 76, 88, 92};
int sum = 0;
for(int i = 0; i < 5; i++) {
    sum += scores[i];
}
double average = (double)sum / 5;

✔ 활용 포인트:
인덱스를 통해 점수 접근

반복문과 함께 사용하여 합계/평균 등의 계산 용이

📌 2. 이미지 처리 (픽셀 정보 저장)
2차원 배열로 이미지의 픽셀 정보를 표현 가능:

python

image = [
    [255, 128, 0],
    [0,   255, 128],
    [128, 0,   255]
]
# (3x3 이미지 - 각 값은 픽셀의 명도 값)
✔ 활용 포인트:
2차원 배열 → 행렬 기반의 이미지 표현

필터 처리, 회전, 흑백 변환 등의 연산 가능

📌 3. 알고리즘 구현의 기본 단위
예: 버블 정렬
java

int[] arr = {5, 3, 4, 1, 2};
for (int i = 0; i < arr.length - 1; i++) {
    for (int j = 0; j < arr.length - 1 - i; j++) {
        if (arr[j] > arr[j + 1]) {
            int temp = arr[j];
            arr[j] = arr[j + 1];
            arr[j + 1] = temp;
        }
    }
}
✔ 활용 포인트:
정렬, 탐색, 누적합, 슬라이딩 윈도우 등 거의 모든 알고리즘이 배열로 시작

📌 4. 스케줄 관리 / 예약 시스템
요일별 일정을 저장하는 경우:

python

schedule = ["수업", "회의", "운동", "공부", "휴식", "쇼핑", "가족모임"]
print("금요일 일정:", schedule[4])
✔ 활용 포인트:
고정된 요일(7일) → 배열로 적합

날짜 또는 인덱스를 기반으로 접근

📌 5. 문자열 처리
문자 배열을 사용한 문자열 구성:

c

char name[] = "Alice";
printf("첫 글자: %c\n", name[0]); // 'A'
✔ 활용 포인트:
C에서는 문자열을 문자 배열로 처리함

한 글자씩 접근/수정 가능

📌 6. 게임 상태 저장
게임 보드 (틱택토 등):

python

board = [' ', 'X', 'O',
         'X', 'O', 'X',
         'O', ' ', 'X']
✔ 활용 포인트:
1차원 배열로 2차원 보드 표현 가능 (3x3)

위치 인덱스로 접근하여 상태 변경, 판정 수행
